package tracing

import (
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"strings"

	"poc/commons/core/constants"
)

const (
	AutoGeneratedId64  AutoGeneratedParam = "generateId64"
	AutoGeneratedId128 AutoGeneratedParam = "generateId128"

	TRACE_PARENT string = "traceParent"
	TRACE_ID     string = "traceId"
	SPAN_ID      string = "spanId"

	TRACE_PARENT_REGEX string = `^[0-9A-Fa-f]{2}-[0-9A-Fa-f]{32}-[0-9A-Fa-f]{16}-[0-9A-Fa-f]{2}$`
)

func generateId64() string {
	b := make([]byte, 8)
	_, _ = rand.Read(b)
	return hex.EncodeToString(b)
}

func GetTraceId(traceParent string) string {
	parts := strings.Split(traceParent, constants.MIDDLE_DASH)
	if len(parts) >= 3 {
		return parts[1]
	}
	return constants.EMPTY
}

func GetSpanId(traceParent string) string {
	parts := strings.Split(traceParent, constants.MIDDLE_DASH)
	if len(parts) >= 3 {
		return parts[2]
	}
	return constants.EMPTY
}

func GetNewTraceParent(traceParent string) string {
	traceId := GetTraceId(traceParent)
	newSpanId := generateId64()
	return fmt.Sprintf("00-%s-%s-01", traceId, newSpanId)
}

func GetTraceHeadersAsMap(traceParent string) map[string]string {
	if traceParent == constants.EMPTY {
		return map[string]string{}
	}
	return map[string]string{
		TRACE_PARENT: traceParent,
		TRACE_ID:     GetTraceId(traceParent),
		SPAN_ID:      GetSpanId(traceParent),
	}
}

func GetTraceHeaderValue(headerKey, traceParent string) string {
	switch headerKey {

	case "TRACE_PARENT":
		return traceParent

	case "TRACE_ID":
		return GetTraceId(traceParent)

	case "SPAN_ID":
		return GetSpanId(traceParent)

	default:
		return constants.EMPTY
	}
}
