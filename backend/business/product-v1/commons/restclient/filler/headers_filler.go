package filler

import (
	"strings"

	"com.demo.poc/commons/properties"
	"com.demo.poc/commons/tracing"
)

type HeaderFiller struct {
	props       *properties.ApplicationProperties
	serviceName string
}

func NewHeaderFiller(props *properties.ApplicationProperties, serviceName string) *HeaderFiller {
	return &HeaderFiller{props: props, serviceName: serviceName}
}

func (headerFiller *HeaderFiller) FillHeaders(incoming map[string]string) map[string]string {
	headers := make(map[string]string)

	//provided
	restClient := headerFiller.props.RestClients[headerFiller.serviceName]
	for key, value := range restClient.Request.Headers.Provided {
		headers[key] = value
	}

	//forwarded
	for outKey, inKey := range restClient.Request.Headers.Forwarded {
		if val, exists := incoming[inKey]; exists {
			headers[outKey] = val
		}
	}

	//auto-generated
	for key, param := range restClient.Request.Headers.AutoGenerated {
		headers[key] = param.Generate()
	}

	//tracing
	for key, traceField := range restClient.Request.Headers.Tracing {
		if traceParent, exists := incoming[strings.ToLower(tracing.TRACE_PARENT)]; exists {
			headers[key] = tracing.GetTraceHeaderValue(traceField, traceParent)
		}
	}
	return headers
}
